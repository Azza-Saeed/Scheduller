
scheduler_OS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000080a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000080a  0000089e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800060  00800060  0000089e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000008a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00000ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cd4  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000482  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000573  00000000  00000000  0000224e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000031c  00000000  00000000  000027c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a3  00000000  00000000  00002ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000731  00000000  00000000  00003083  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <__vector_10>
  2c:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bf 02 	call	0x57e	; 0x57e <main>
  8a:	0c 94 03 04 	jmp	0x806	; 0x806 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dio_vidConfigChannel>:
* \Return value:   : None                            
*******************************************************************************/

void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	31 f1       	breq	.+76     	; 0xe2 <dio_vidConfigChannel+0x50>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	38 f0       	brcs	.+14     	; 0xa8 <dio_vidConfigChannel+0x16>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	09 f4       	brne	.+2      	; 0xa0 <dio_vidConfigChannel+0xe>
  9e:	3e c0       	rjmp	.+124    	; 0x11c <dio_vidConfigChannel+0x8a>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	09 f0       	breq	.+2      	; 0xa6 <dio_vidConfigChannel+0x14>
  a4:	74 c0       	rjmp	.+232    	; 0x18e <dio_vidConfigChannel+0xfc>
  a6:	57 c0       	rjmp	.+174    	; 0x156 <dio_vidConfigChannel+0xc4>
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
  a8:	41 30       	cpi	r20, 0x01	; 1
  aa:	69 f4       	brne	.+26     	; 0xc6 <dio_vidConfigChannel+0x34>
		{
			SET_BIT (DIO_DDRA_REG,channel);
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	ac 01       	movw	r20, r24
  b4:	02 c0       	rjmp	.+4      	; 0xba <dio_vidConfigChannel+0x28>
  b6:	44 0f       	add	r20, r20
  b8:	55 1f       	adc	r21, r21
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <dio_vidConfigChannel+0x24>
  be:	ba 01       	movw	r22, r20
  c0:	62 2b       	or	r22, r18
  c2:	6a bb       	out	0x1a, r22	; 26
  c4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
  c6:	2a b3       	in	r18, 0x1a	; 26
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	ac 01       	movw	r20, r24
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <dio_vidConfigChannel+0x42>
  d0:	44 0f       	add	r20, r20
  d2:	55 1f       	adc	r21, r21
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <dio_vidConfigChannel+0x3e>
  d8:	ba 01       	movw	r22, r20
  da:	60 95       	com	r22
  dc:	62 23       	and	r22, r18
  de:	6a bb       	out	0x1a, r22	; 26
  e0:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
  e2:	41 30       	cpi	r20, 0x01	; 1
  e4:	69 f4       	brne	.+26     	; 0x100 <dio_vidConfigChannel+0x6e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
  e6:	27 b3       	in	r18, 0x17	; 23
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	ac 01       	movw	r20, r24
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <dio_vidConfigChannel+0x62>
  f0:	44 0f       	add	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <dio_vidConfigChannel+0x5e>
  f8:	ba 01       	movw	r22, r20
  fa:	62 2b       	or	r22, r18
  fc:	67 bb       	out	0x17, r22	; 23
  fe:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
 100:	27 b3       	in	r18, 0x17	; 23
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	ac 01       	movw	r20, r24
 108:	02 c0       	rjmp	.+4      	; 0x10e <dio_vidConfigChannel+0x7c>
 10a:	44 0f       	add	r20, r20
 10c:	55 1f       	adc	r21, r21
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <dio_vidConfigChannel+0x78>
 112:	ba 01       	movw	r22, r20
 114:	60 95       	com	r22
 116:	62 23       	and	r22, r18
 118:	67 bb       	out	0x17, r22	; 23
 11a:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	69 f4       	brne	.+26     	; 0x13a <dio_vidConfigChannel+0xa8>
		{
			SET_BIT (DIO_DDRC_REG,channel);
 120:	24 b3       	in	r18, 0x14	; 20
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	ac 01       	movw	r20, r24
 128:	02 c0       	rjmp	.+4      	; 0x12e <dio_vidConfigChannel+0x9c>
 12a:	44 0f       	add	r20, r20
 12c:	55 1f       	adc	r21, r21
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <dio_vidConfigChannel+0x98>
 132:	ba 01       	movw	r22, r20
 134:	62 2b       	or	r22, r18
 136:	64 bb       	out	0x14, r22	; 20
 138:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 13a:	24 b3       	in	r18, 0x14	; 20
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	ac 01       	movw	r20, r24
 142:	02 c0       	rjmp	.+4      	; 0x148 <dio_vidConfigChannel+0xb6>
 144:	44 0f       	add	r20, r20
 146:	55 1f       	adc	r21, r21
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <dio_vidConfigChannel+0xb2>
 14c:	ba 01       	movw	r22, r20
 14e:	60 95       	com	r22
 150:	62 23       	and	r22, r18
 152:	64 bb       	out	0x14, r22	; 20
 154:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 156:	41 30       	cpi	r20, 0x01	; 1
 158:	69 f4       	brne	.+26     	; 0x174 <dio_vidConfigChannel+0xe2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	ac 01       	movw	r20, r24
 162:	02 c0       	rjmp	.+4      	; 0x168 <dio_vidConfigChannel+0xd6>
 164:	44 0f       	add	r20, r20
 166:	55 1f       	adc	r21, r21
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <dio_vidConfigChannel+0xd2>
 16c:	ba 01       	movw	r22, r20
 16e:	62 2b       	or	r22, r18
 170:	61 bb       	out	0x11, r22	; 17
 172:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 174:	21 b3       	in	r18, 0x11	; 17
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	ac 01       	movw	r20, r24
 17c:	02 c0       	rjmp	.+4      	; 0x182 <dio_vidConfigChannel+0xf0>
 17e:	44 0f       	add	r20, r20
 180:	55 1f       	adc	r21, r21
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <dio_vidConfigChannel+0xec>
 186:	ba 01       	movw	r22, r20
 188:	60 95       	com	r22
 18a:	62 23       	and	r22, r18
 18c:	61 bb       	out	0x11, r22	; 17
 18e:	08 95       	ret

00000190 <dio_vidConfigPort>:

* \Return value:   : None
*******************************************************************************/
void dio_vidConfigPort(dio_portId_t port, u8 direction)
{
	switch (port)
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	49 f0       	breq	.+18     	; 0x1a6 <dio_vidConfigPort+0x16>
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	28 f0       	brcs	.+10     	; 0x1a2 <dio_vidConfigPort+0x12>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	39 f0       	breq	.+14     	; 0x1aa <dio_vidConfigPort+0x1a>
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	41 f4       	brne	.+16     	; 0x1b0 <dio_vidConfigPort+0x20>
 1a0:	06 c0       	rjmp	.+12     	; 0x1ae <dio_vidConfigPort+0x1e>
	{
		case DIO_PORTA: DIO_DDRA_REG = direction;	break;
 1a2:	6a bb       	out	0x1a, r22	; 26
 1a4:	08 95       	ret
		case DIO_PORTB: DIO_DDRB_REG = direction;	break;
 1a6:	67 bb       	out	0x17, r22	; 23
 1a8:	08 95       	ret
		case DIO_PORTC: DIO_DDRC_REG = direction;	break;
 1aa:	64 bb       	out	0x14, r22	; 20
 1ac:	08 95       	ret
		case DIO_PORTD: DIO_DDRD_REG = direction;	break;
 1ae:	61 bb       	out	0x11, r22	; 17
 1b0:	08 95       	ret

000001b2 <dio_vidSetPortValue>:

* \Return value:   : None
*******************************************************************************/
void dio_vidSetPortValue(dio_portId_t port, u8 value)
{
	switch (port)
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	49 f0       	breq	.+18     	; 0x1c8 <dio_vidSetPortValue+0x16>
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	28 f0       	brcs	.+10     	; 0x1c4 <dio_vidSetPortValue+0x12>
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	39 f0       	breq	.+14     	; 0x1cc <dio_vidSetPortValue+0x1a>
 1be:	83 30       	cpi	r24, 0x03	; 3
 1c0:	41 f4       	brne	.+16     	; 0x1d2 <dio_vidSetPortValue+0x20>
 1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <dio_vidSetPortValue+0x1e>
	{
		case DIO_PORTA: DIO_PORTA_REG = value;	break;
 1c4:	6b bb       	out	0x1b, r22	; 27
 1c6:	08 95       	ret
		case DIO_PORTB: DIO_PORTB_REG = value;	break;
 1c8:	68 bb       	out	0x18, r22	; 24
 1ca:	08 95       	ret
		case DIO_PORTC: DIO_PORTC_REG = value;	break;
 1cc:	65 bb       	out	0x15, r22	; 21
 1ce:	08 95       	ret
		case DIO_PORTD: DIO_PORTD_REG = value;	break;
 1d0:	62 bb       	out	0x12, r22	; 18
 1d2:	08 95       	ret

000001d4 <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	31 f1       	breq	.+76     	; 0x224 <dio_vidWriteChannel+0x50>
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	38 f0       	brcs	.+14     	; 0x1ea <dio_vidWriteChannel+0x16>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	09 f4       	brne	.+2      	; 0x1e2 <dio_vidWriteChannel+0xe>
 1e0:	3e c0       	rjmp	.+124    	; 0x25e <dio_vidWriteChannel+0x8a>
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <dio_vidWriteChannel+0x14>
 1e6:	74 c0       	rjmp	.+232    	; 0x2d0 <dio_vidWriteChannel+0xfc>
 1e8:	57 c0       	rjmp	.+174    	; 0x298 <dio_vidWriteChannel+0xc4>
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 1ea:	44 23       	and	r20, r20
 1ec:	71 f4       	brne	.+28     	; 0x20a <dio_vidWriteChannel+0x36>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
 1ee:	2b b3       	in	r18, 0x1b	; 27
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	ac 01       	movw	r20, r24
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <dio_vidWriteChannel+0x28>
 1f8:	44 0f       	add	r20, r20
 1fa:	55 1f       	adc	r21, r21
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <dio_vidWriteChannel+0x24>
 200:	ba 01       	movw	r22, r20
 202:	60 95       	com	r22
 204:	62 23       	and	r22, r18
 206:	6b bb       	out	0x1b, r22	; 27
 208:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 20a:	2b b3       	in	r18, 0x1b	; 27
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	ac 01       	movw	r20, r24
 212:	02 c0       	rjmp	.+4      	; 0x218 <dio_vidWriteChannel+0x44>
 214:	44 0f       	add	r20, r20
 216:	55 1f       	adc	r21, r21
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <dio_vidWriteChannel+0x40>
 21c:	ba 01       	movw	r22, r20
 21e:	62 2b       	or	r22, r18
 220:	6b bb       	out	0x1b, r22	; 27
 222:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 224:	44 23       	and	r20, r20
 226:	71 f4       	brne	.+28     	; 0x244 <dio_vidWriteChannel+0x70>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 228:	28 b3       	in	r18, 0x18	; 24
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	ac 01       	movw	r20, r24
 230:	02 c0       	rjmp	.+4      	; 0x236 <dio_vidWriteChannel+0x62>
 232:	44 0f       	add	r20, r20
 234:	55 1f       	adc	r21, r21
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <dio_vidWriteChannel+0x5e>
 23a:	ba 01       	movw	r22, r20
 23c:	60 95       	com	r22
 23e:	62 23       	and	r22, r18
 240:	68 bb       	out	0x18, r22	; 24
 242:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 244:	28 b3       	in	r18, 0x18	; 24
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	ac 01       	movw	r20, r24
 24c:	02 c0       	rjmp	.+4      	; 0x252 <dio_vidWriteChannel+0x7e>
 24e:	44 0f       	add	r20, r20
 250:	55 1f       	adc	r21, r21
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <dio_vidWriteChannel+0x7a>
 256:	ba 01       	movw	r22, r20
 258:	62 2b       	or	r22, r18
 25a:	68 bb       	out	0x18, r22	; 24
 25c:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 25e:	44 23       	and	r20, r20
 260:	71 f4       	brne	.+28     	; 0x27e <dio_vidWriteChannel+0xaa>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 262:	25 b3       	in	r18, 0x15	; 21
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	ac 01       	movw	r20, r24
 26a:	02 c0       	rjmp	.+4      	; 0x270 <dio_vidWriteChannel+0x9c>
 26c:	44 0f       	add	r20, r20
 26e:	55 1f       	adc	r21, r21
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <dio_vidWriteChannel+0x98>
 274:	ba 01       	movw	r22, r20
 276:	60 95       	com	r22
 278:	62 23       	and	r22, r18
 27a:	65 bb       	out	0x15, r22	; 21
 27c:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 27e:	25 b3       	in	r18, 0x15	; 21
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	ac 01       	movw	r20, r24
 286:	02 c0       	rjmp	.+4      	; 0x28c <dio_vidWriteChannel+0xb8>
 288:	44 0f       	add	r20, r20
 28a:	55 1f       	adc	r21, r21
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <dio_vidWriteChannel+0xb4>
 290:	ba 01       	movw	r22, r20
 292:	62 2b       	or	r22, r18
 294:	65 bb       	out	0x15, r22	; 21
 296:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 298:	44 23       	and	r20, r20
 29a:	71 f4       	brne	.+28     	; 0x2b8 <dio_vidWriteChannel+0xe4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 29c:	22 b3       	in	r18, 0x12	; 18
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	ac 01       	movw	r20, r24
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <dio_vidWriteChannel+0xd6>
 2a6:	44 0f       	add	r20, r20
 2a8:	55 1f       	adc	r21, r21
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <dio_vidWriteChannel+0xd2>
 2ae:	ba 01       	movw	r22, r20
 2b0:	60 95       	com	r22
 2b2:	62 23       	and	r22, r18
 2b4:	62 bb       	out	0x12, r22	; 18
 2b6:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 2b8:	22 b3       	in	r18, 0x12	; 18
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	ac 01       	movw	r20, r24
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <dio_vidWriteChannel+0xf2>
 2c2:	44 0f       	add	r20, r20
 2c4:	55 1f       	adc	r21, r21
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <dio_vidWriteChannel+0xee>
 2ca:	ba 01       	movw	r22, r20
 2cc:	62 2b       	or	r22, r18
 2ce:	62 bb       	out	0x12, r22	; 18
 2d0:	08 95       	ret

000002d2 <dio_vidWriteChannelGroup>:
*******************************************************************************/
void dio_vidWriteChannelGroup(dio_portId_t port,u8 value,u8 mask, u8 pos)
{
	/*	show me your code */
	
	switch(port)
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	c1 f0       	breq	.+48     	; 0x306 <dio_vidWriteChannelGroup+0x34>
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	30 f0       	brcs	.+12     	; 0x2e6 <dio_vidWriteChannelGroup+0x14>
 2da:	82 30       	cpi	r24, 0x02	; 2
 2dc:	19 f1       	breq	.+70     	; 0x324 <dio_vidWriteChannelGroup+0x52>
 2de:	83 30       	cpi	r24, 0x03	; 3
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <dio_vidWriteChannelGroup+0x12>
 2e2:	3e c0       	rjmp	.+124    	; 0x360 <dio_vidWriteChannelGroup+0x8e>
 2e4:	2e c0       	rjmp	.+92     	; 0x342 <dio_vidWriteChannelGroup+0x70>
	{
		case DIO_PORTA:
			DIO_PORTA_REG &= ~mask;
 2e6:	8b b3       	in	r24, 0x1b	; 27
 2e8:	94 2f       	mov	r25, r20
 2ea:	90 95       	com	r25
 2ec:	89 23       	and	r24, r25
 2ee:	8b bb       	out	0x1b, r24	; 27
			DIO_PORTA_REG = (value<<pos) & mask;
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	cb 01       	movw	r24, r22
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <dio_vidWriteChannelGroup+0x28>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	2a 95       	dec	r18
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <dio_vidWriteChannelGroup+0x24>
 2fe:	9c 01       	movw	r18, r24
 300:	24 23       	and	r18, r20
 302:	2b bb       	out	0x1b, r18	; 27
		break;
 304:	08 95       	ret

		case DIO_PORTB:
			DIO_PORTB_REG &= ~mask;
 306:	88 b3       	in	r24, 0x18	; 24
 308:	94 2f       	mov	r25, r20
 30a:	90 95       	com	r25
 30c:	89 23       	and	r24, r25
 30e:	88 bb       	out	0x18, r24	; 24
			DIO_PORTB_REG = (value<<pos) & mask;
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	fb 01       	movw	r30, r22
 314:	02 c0       	rjmp	.+4      	; 0x31a <dio_vidWriteChannelGroup+0x48>
 316:	ee 0f       	add	r30, r30
 318:	ff 1f       	adc	r31, r31
 31a:	2a 95       	dec	r18
 31c:	e2 f7       	brpl	.-8      	; 0x316 <dio_vidWriteChannelGroup+0x44>
 31e:	e4 23       	and	r30, r20
 320:	e8 bb       	out	0x18, r30	; 24
		break;
 322:	08 95       	ret

		case DIO_PORTC:
			DIO_PORTC_REG &= ~mask;
 324:	85 b3       	in	r24, 0x15	; 21
 326:	94 2f       	mov	r25, r20
 328:	90 95       	com	r25
 32a:	89 23       	and	r24, r25
 32c:	85 bb       	out	0x15, r24	; 21
			DIO_PORTC_REG = (value<<pos) & mask;
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	cb 01       	movw	r24, r22
 332:	02 c0       	rjmp	.+4      	; 0x338 <dio_vidWriteChannelGroup+0x66>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	2a 95       	dec	r18
 33a:	e2 f7       	brpl	.-8      	; 0x334 <dio_vidWriteChannelGroup+0x62>
 33c:	84 23       	and	r24, r20
 33e:	85 bb       	out	0x15, r24	; 21
		break;
 340:	08 95       	ret

		case DIO_PORTD:
			DIO_PORTD_REG &= ~mask;
 342:	82 b3       	in	r24, 0x12	; 18
 344:	94 2f       	mov	r25, r20
 346:	90 95       	com	r25
 348:	89 23       	and	r24, r25
 34a:	82 bb       	out	0x12, r24	; 18
			DIO_PORTD_REG = (value<<pos) & mask;
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	cb 01       	movw	r24, r22
 350:	02 c0       	rjmp	.+4      	; 0x356 <dio_vidWriteChannelGroup+0x84>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	2a 95       	dec	r18
 358:	e2 f7       	brpl	.-8      	; 0x352 <dio_vidWriteChannelGroup+0x80>
 35a:	9c 01       	movw	r18, r24
 35c:	24 23       	and	r18, r20
 35e:	22 bb       	out	0x12, r18	; 18
 360:	08 95       	ret

00000362 <dio_vidReadChannelGroup>:
					 pos -> data position
* \Return value:   : read                            
*******************************************************************************/
u8 dio_vidReadChannelGroup(dio_portId_t port,u8 mask, u8 pos)
{
	return (port&mask)>>pos;
 362:	68 23       	and	r22, r24
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	cb 01       	movw	r24, r22
 368:	02 c0       	rjmp	.+4      	; 0x36e <dio_vidReadChannelGroup+0xc>
 36a:	95 95       	asr	r25
 36c:	87 95       	ror	r24
 36e:	4a 95       	dec	r20
 370:	e2 f7       	brpl	.-8      	; 0x36a <dio_vidReadChannelGroup+0x8>
}
 372:	08 95       	ret

00000374 <dio_vidFlipChannel>:
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
	switch (port)
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	a1 f0       	breq	.+40     	; 0x3a0 <dio_vidFlipChannel+0x2c>
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	28 f0       	brcs	.+10     	; 0x386 <dio_vidFlipChannel+0x12>
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	e9 f0       	breq	.+58     	; 0x3ba <dio_vidFlipChannel+0x46>
 380:	83 30       	cpi	r24, 0x03	; 3
 382:	a1 f5       	brne	.+104    	; 0x3ec <dio_vidFlipChannel+0x78>
 384:	27 c0       	rjmp	.+78     	; 0x3d4 <dio_vidFlipChannel+0x60>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,channel);
 386:	2b b3       	in	r18, 0x1b	; 27
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	ac 01       	movw	r20, r24
 38e:	02 c0       	rjmp	.+4      	; 0x394 <dio_vidFlipChannel+0x20>
 390:	44 0f       	add	r20, r20
 392:	55 1f       	adc	r21, r21
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <dio_vidFlipChannel+0x1c>
 398:	ba 01       	movw	r22, r20
 39a:	62 27       	eor	r22, r18
 39c:	6b bb       	out	0x1b, r22	; 27
		break;
 39e:	08 95       	ret

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,channel);
 3a0:	28 b3       	in	r18, 0x18	; 24
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	ac 01       	movw	r20, r24
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <dio_vidFlipChannel+0x3a>
 3aa:	44 0f       	add	r20, r20
 3ac:	55 1f       	adc	r21, r21
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <dio_vidFlipChannel+0x36>
 3b2:	ba 01       	movw	r22, r20
 3b4:	62 27       	eor	r22, r18
 3b6:	68 bb       	out	0x18, r22	; 24
		break;
 3b8:	08 95       	ret

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
 3ba:	25 b3       	in	r18, 0x15	; 21
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	ac 01       	movw	r20, r24
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <dio_vidFlipChannel+0x54>
 3c4:	44 0f       	add	r20, r20
 3c6:	55 1f       	adc	r21, r21
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <dio_vidFlipChannel+0x50>
 3cc:	ba 01       	movw	r22, r20
 3ce:	62 27       	eor	r22, r18
 3d0:	65 bb       	out	0x15, r22	; 21
		break;
 3d2:	08 95       	ret

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
 3d4:	22 b3       	in	r18, 0x12	; 18
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	ac 01       	movw	r20, r24
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <dio_vidFlipChannel+0x6e>
 3de:	44 0f       	add	r20, r20
 3e0:	55 1f       	adc	r21, r21
 3e2:	6a 95       	dec	r22
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <dio_vidFlipChannel+0x6a>
 3e6:	ba 01       	movw	r22, r20
 3e8:	62 27       	eor	r22, r18
 3ea:	62 bb       	out	0x12, r22	; 18
 3ec:	08 95       	ret

000003ee <dio_dioLevelReadChannel>:
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
	switch (port)
 3ee:	81 30       	cpi	r24, 0x01	; 1
 3f0:	89 f0       	breq	.+34     	; 0x414 <dio_dioLevelReadChannel+0x26>
 3f2:	81 30       	cpi	r24, 0x01	; 1
 3f4:	28 f0       	brcs	.+10     	; 0x400 <dio_dioLevelReadChannel+0x12>
 3f6:	82 30       	cpi	r24, 0x02	; 2
 3f8:	b9 f0       	breq	.+46     	; 0x428 <dio_dioLevelReadChannel+0x3a>
 3fa:	83 30       	cpi	r24, 0x03	; 3
 3fc:	49 f5       	brne	.+82     	; 0x450 <dio_dioLevelReadChannel+0x62>
 3fe:	1e c0       	rjmp	.+60     	; 0x43c <dio_dioLevelReadChannel+0x4e>
	{
	 case DIO_PORTA:
		loc_pinRead = CHECK_BIT(DIO_PINA_REG, channel);
 400:	29 b3       	in	r18, 0x19	; 25
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	c9 01       	movw	r24, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <dio_dioLevelReadChannel+0x1e>
 408:	95 95       	asr	r25
 40a:	87 95       	ror	r24
 40c:	6a 95       	dec	r22
 40e:	e2 f7       	brpl	.-8      	; 0x408 <dio_dioLevelReadChannel+0x1a>
 410:	81 70       	andi	r24, 0x01	; 1
		break;
 412:	08 95       	ret

	 case DIO_PORTB:
		loc_pinRead = CHECK_BIT(DIO_PINB_REG, channel);
 414:	26 b3       	in	r18, 0x16	; 22
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	c9 01       	movw	r24, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <dio_dioLevelReadChannel+0x32>
 41c:	95 95       	asr	r25
 41e:	87 95       	ror	r24
 420:	6a 95       	dec	r22
 422:	e2 f7       	brpl	.-8      	; 0x41c <dio_dioLevelReadChannel+0x2e>
 424:	81 70       	andi	r24, 0x01	; 1
		break;
 426:	08 95       	ret

	 case DIO_PORTC:
		loc_pinRead = CHECK_BIT(DIO_PINC_REG, channel);
 428:	23 b3       	in	r18, 0x13	; 19
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	c9 01       	movw	r24, r18
 42e:	02 c0       	rjmp	.+4      	; 0x434 <dio_dioLevelReadChannel+0x46>
 430:	95 95       	asr	r25
 432:	87 95       	ror	r24
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <dio_dioLevelReadChannel+0x42>
 438:	81 70       	andi	r24, 0x01	; 1
		break;
 43a:	08 95       	ret

	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
 43c:	20 b3       	in	r18, 0x10	; 16
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	c9 01       	movw	r24, r18
 442:	02 c0       	rjmp	.+4      	; 0x448 <dio_dioLevelReadChannel+0x5a>
 444:	95 95       	asr	r25
 446:	87 95       	ror	r24
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <dio_dioLevelReadChannel+0x56>
 44c:	81 70       	andi	r24, 0x01	; 1
		break;
 44e:	08 95       	ret
					 channel  -> MC channel ID
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
 450:	80 e0       	ldi	r24, 0x00	; 0
	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
		break;
    }
	return loc_pinRead;
}
 452:	08 95       	ret

00000454 <dio_vidEnablePullUp>:
*******************************************************************************/
void dio_vidEnablePullUp(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */
	
	switch (port)
 454:	81 30       	cpi	r24, 0x01	; 1
 456:	f9 f0       	breq	.+62     	; 0x496 <dio_vidEnablePullUp+0x42>
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	30 f0       	brcs	.+12     	; 0x468 <dio_vidEnablePullUp+0x14>
 45c:	82 30       	cpi	r24, 0x02	; 2
 45e:	91 f1       	breq	.+100    	; 0x4c4 <dio_vidEnablePullUp+0x70>
 460:	83 30       	cpi	r24, 0x03	; 3
 462:	09 f0       	breq	.+2      	; 0x466 <dio_vidEnablePullUp+0x12>
 464:	5c c0       	rjmp	.+184    	; 0x51e <dio_vidEnablePullUp+0xca>
 466:	45 c0       	rjmp	.+138    	; 0x4f2 <dio_vidEnablePullUp+0x9e>
	{
		case DIO_PORTA:
		if(CHECK_BIT(DIO_DDRA_REG,channel) == INPUT)
 468:	8a b3       	in	r24, 0x1a	; 26
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	06 2e       	mov	r0, r22
 46e:	02 c0       	rjmp	.+4      	; 0x474 <dio_vidEnablePullUp+0x20>
 470:	95 95       	asr	r25
 472:	87 95       	ror	r24
 474:	0a 94       	dec	r0
 476:	e2 f7       	brpl	.-8      	; 0x470 <dio_vidEnablePullUp+0x1c>
 478:	80 fd       	sbrc	r24, 0
 47a:	51 c0       	rjmp	.+162    	; 0x51e <dio_vidEnablePullUp+0xca>
		{
			SET_BIT(DIO_PORTA_REG,channel);	
 47c:	2b b3       	in	r18, 0x1b	; 27
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	ac 01       	movw	r20, r24
 484:	02 c0       	rjmp	.+4      	; 0x48a <dio_vidEnablePullUp+0x36>
 486:	44 0f       	add	r20, r20
 488:	55 1f       	adc	r21, r21
 48a:	6a 95       	dec	r22
 48c:	e2 f7       	brpl	.-8      	; 0x486 <dio_vidEnablePullUp+0x32>
 48e:	ba 01       	movw	r22, r20
 490:	62 2b       	or	r22, r18
 492:	6b bb       	out	0x1b, r22	; 27
 494:	08 95       	ret
		}
		break;

		case DIO_PORTB:
			if(CHECK_BIT(DIO_DDRB_REG,channel) == INPUT)
 496:	87 b3       	in	r24, 0x17	; 23
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	06 2e       	mov	r0, r22
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <dio_vidEnablePullUp+0x4e>
 49e:	95 95       	asr	r25
 4a0:	87 95       	ror	r24
 4a2:	0a 94       	dec	r0
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <dio_vidEnablePullUp+0x4a>
 4a6:	80 fd       	sbrc	r24, 0
 4a8:	3a c0       	rjmp	.+116    	; 0x51e <dio_vidEnablePullUp+0xca>
			{
				SET_BIT(DIO_PORTB_REG,channel);
 4aa:	28 b3       	in	r18, 0x18	; 24
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	ac 01       	movw	r20, r24
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <dio_vidEnablePullUp+0x64>
 4b4:	44 0f       	add	r20, r20
 4b6:	55 1f       	adc	r21, r21
 4b8:	6a 95       	dec	r22
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <dio_vidEnablePullUp+0x60>
 4bc:	ba 01       	movw	r22, r20
 4be:	62 2b       	or	r22, r18
 4c0:	68 bb       	out	0x18, r22	; 24
 4c2:	08 95       	ret
			}
		break;

		case DIO_PORTC:
			if(CHECK_BIT(DIO_DDRC_REG,channel) == INPUT)
 4c4:	84 b3       	in	r24, 0x14	; 20
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	06 2e       	mov	r0, r22
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <dio_vidEnablePullUp+0x7c>
 4cc:	95 95       	asr	r25
 4ce:	87 95       	ror	r24
 4d0:	0a 94       	dec	r0
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <dio_vidEnablePullUp+0x78>
 4d4:	80 fd       	sbrc	r24, 0
 4d6:	23 c0       	rjmp	.+70     	; 0x51e <dio_vidEnablePullUp+0xca>
			{
				SET_BIT(DIO_PORTC_REG,channel);
 4d8:	25 b3       	in	r18, 0x15	; 21
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	ac 01       	movw	r20, r24
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <dio_vidEnablePullUp+0x92>
 4e2:	44 0f       	add	r20, r20
 4e4:	55 1f       	adc	r21, r21
 4e6:	6a 95       	dec	r22
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <dio_vidEnablePullUp+0x8e>
 4ea:	ba 01       	movw	r22, r20
 4ec:	62 2b       	or	r22, r18
 4ee:	65 bb       	out	0x15, r22	; 21
 4f0:	08 95       	ret
			}
		break;

		case DIO_PORTD:
			if(CHECK_BIT(DIO_DDRD_REG,channel) == INPUT)
 4f2:	81 b3       	in	r24, 0x11	; 17
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	06 2e       	mov	r0, r22
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <dio_vidEnablePullUp+0xaa>
 4fa:	95 95       	asr	r25
 4fc:	87 95       	ror	r24
 4fe:	0a 94       	dec	r0
 500:	e2 f7       	brpl	.-8      	; 0x4fa <dio_vidEnablePullUp+0xa6>
 502:	80 fd       	sbrc	r24, 0
 504:	0c c0       	rjmp	.+24     	; 0x51e <dio_vidEnablePullUp+0xca>
			{
				SET_BIT(DIO_PORTD_REG,channel);
 506:	22 b3       	in	r18, 0x12	; 18
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	ac 01       	movw	r20, r24
 50e:	02 c0       	rjmp	.+4      	; 0x514 <dio_vidEnablePullUp+0xc0>
 510:	44 0f       	add	r20, r20
 512:	55 1f       	adc	r21, r21
 514:	6a 95       	dec	r22
 516:	e2 f7       	brpl	.-8      	; 0x510 <dio_vidEnablePullUp+0xbc>
 518:	ba 01       	movw	r22, r20
 51a:	62 2b       	or	r22, r18
 51c:	62 bb       	out	0x12, r22	; 18
 51e:	08 95       	ret

00000520 <GIE_voidGlobalInterruptEnable>:

#define SREG    *((volatile u8*)0x5F)

void GIE_voidGlobalInterruptEnable(void)
{
	SET_BIT(SREG,7);
 520:	8f b7       	in	r24, 0x3f	; 63
 522:	80 68       	ori	r24, 0x80	; 128
 524:	8f bf       	out	0x3f, r24	; 63
}
 526:	08 95       	ret

00000528 <GIE_voidGlobalInterruptDisable>:

void GIE_voidGlobalInterruptDisable(void)
{
	CLEAR_BIT(SREG,7);
 528:	8f b7       	in	r24, 0x3f	; 63
 52a:	8f 77       	andi	r24, 0x7F	; 127
 52c:	8f bf       	out	0x3f, r24	; 63
}
 52e:	08 95       	ret

00000530 <Green_vidLed>:
	dio_vidFlipChannel(DIO_PORTA,1);
	_delay_ms(100);
}
void Green_vidLed(void)
{
	dio_vidFlipChannel(DIO_PORTA,2);
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	62 e0       	ldi	r22, 0x02	; 2
 534:	0e 94 ba 01 	call	0x374	; 0x374 <dio_vidFlipChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 538:	8f ef       	ldi	r24, 0xFF	; 255
 53a:	91 ee       	ldi	r25, 0xE1	; 225
 53c:	a4 e0       	ldi	r26, 0x04	; 4
 53e:	81 50       	subi	r24, 0x01	; 1
 540:	90 40       	sbci	r25, 0x00	; 0
 542:	a0 40       	sbci	r26, 0x00	; 0
 544:	e1 f7       	brne	.-8      	; 0x53e <Green_vidLed+0xe>
 546:	00 c0       	rjmp	.+0      	; 0x548 <Green_vidLed+0x18>
 548:	00 00       	nop
	_delay_ms(200);
 54a:	08 95       	ret

0000054c <Red_vidled>:
	dio_vidConfigChannel(DIO_PORTA,1,OUTPUT);
	dio_vidConfigChannel(DIO_PORTA,2,OUTPUT);
}
void Red_vidled(void)
{
	dio_vidFlipChannel(DIO_PORTA,1);
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	61 e0       	ldi	r22, 0x01	; 1
 550:	0e 94 ba 01 	call	0x374	; 0x374 <dio_vidFlipChannel>
 554:	8f ef       	ldi	r24, 0xFF	; 255
 556:	90 e7       	ldi	r25, 0x70	; 112
 558:	a2 e0       	ldi	r26, 0x02	; 2
 55a:	81 50       	subi	r24, 0x01	; 1
 55c:	90 40       	sbci	r25, 0x00	; 0
 55e:	a0 40       	sbci	r26, 0x00	; 0
 560:	e1 f7       	brne	.-8      	; 0x55a <Red_vidled+0xe>
 562:	00 c0       	rjmp	.+0      	; 0x564 <Red_vidled+0x18>
 564:	00 00       	nop
	_delay_ms(100);
}
 566:	08 95       	ret

00000568 <Init_vidTask>:
        //TODO:: Please write your application code 
    }
}
void Init_vidTask(void)
{
	dio_vidConfigChannel(DIO_PORTA,1,OUTPUT);
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	61 e0       	ldi	r22, 0x01	; 1
 56c:	41 e0       	ldi	r20, 0x01	; 1
 56e:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
	dio_vidConfigChannel(DIO_PORTA,2,OUTPUT);
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	62 e0       	ldi	r22, 0x02	; 2
 576:	41 e0       	ldi	r20, 0x01	; 1
 578:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
}
 57c:	08 95       	ret

0000057e <main>:
void Red_vidled(void);
void Green_vidLed(void);

int main(void)
{
	Init_vidTask();
 57e:	0e 94 b4 02 	call	0x568	; 0x568 <Init_vidTask>
	
	Create_u8task(1,1,0,Red_vidled);
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	61 e0       	ldi	r22, 0x01	; 1
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	40 e0       	ldi	r20, 0x00	; 0
 58a:	50 e0       	ldi	r21, 0x00	; 0
 58c:	26 ea       	ldi	r18, 0xA6	; 166
 58e:	32 e0       	ldi	r19, 0x02	; 2
 590:	0e 94 1c 03 	call	0x638	; 0x638 <Create_u8task>
	Create_u8task(2,2,1,Green_vidLed);
 594:	82 e0       	ldi	r24, 0x02	; 2
 596:	62 e0       	ldi	r22, 0x02	; 2
 598:	70 e0       	ldi	r23, 0x00	; 0
 59a:	41 e0       	ldi	r20, 0x01	; 1
 59c:	50 e0       	ldi	r21, 0x00	; 0
 59e:	28 e9       	ldi	r18, 0x98	; 152
 5a0:	32 e0       	ldi	r19, 0x02	; 2
 5a2:	0e 94 1c 03 	call	0x638	; 0x638 <Create_u8task>
	
	Start_voidSchaduler();
 5a6:	0e 94 0e 03 	call	0x61c	; 0x61c <Start_voidSchaduler>
 5aa:	ff cf       	rjmp	.-2      	; 0x5aa <main+0x2c>

000005ac <voidScheduler>:
void Delete_voidTask(u8 task_u8priority)
{
	System_Tasks[task_u8priority].Taskfunc = 0;
}
static void voidScheduler(void)
{
 5ac:	cf 92       	push	r12
 5ae:	df 92       	push	r13
 5b0:	ef 92       	push	r14
 5b2:	ff 92       	push	r15
 5b4:	0f 93       	push	r16
 5b6:	1f 93       	push	r17
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	06 e6       	ldi	r16, 0x66	; 102
 5be:	10 e0       	ldi	r17, 0x00	; 0
 5c0:	e8 01       	movw	r28, r16
 5c2:	26 97       	sbiw	r28, 0x06	; 6

void Delete_voidTask(u8 task_u8priority)
{
	System_Tasks[task_u8priority].Taskfunc = 0;
}
static void voidScheduler(void)
 5c4:	0f 2e       	mov	r0, r31
 5c6:	ff e0       	ldi	r31, 0x0F	; 15
 5c8:	ef 2e       	mov	r14, r31
 5ca:	ff 24       	eor	r15, r15
 5cc:	f0 2d       	mov	r31, r0
 5ce:	e0 0e       	add	r14, r16
 5d0:	f1 1e       	adc	r15, r17
	u8 Local_u8TaskCounter;
	
	 /* Loop on all tasks to check thier periodicity */
	for(Local_u8TaskCounter=0;Local_u8TaskCounter<MAXIMUM_NUMBER_TASKS;Local_u8TaskCounter++)
	{
		if( System_Tasks[Local_u8TaskCounter].task_u8state == TASK_RESUMED )
 5d2:	f8 01       	movw	r30, r16
 5d4:	80 81       	ld	r24, Z
 5d6:	88 23       	and	r24, r24
 5d8:	91 f4       	brne	.+36     	; 0x5fe <voidScheduler+0x52>
		{
			if( System_Tasks[Local_u8TaskCounter].task_u16FirstDelay == 0 )
 5da:	8a 81       	ldd	r24, Y+2	; 0x02
 5dc:	9b 81       	ldd	r25, Y+3	; 0x03
 5de:	00 97       	sbiw	r24, 0x00	; 0
 5e0:	59 f4       	brne	.+22     	; 0x5f8 <voidScheduler+0x4c>
			{
				/* Invoke this function in */
				if( System_Tasks[Local_u8TaskCounter].Taskfunc != 0 )
 5e2:	ec 81       	ldd	r30, Y+4	; 0x04
 5e4:	fd 81       	ldd	r31, Y+5	; 0x05
 5e6:	30 97       	sbiw	r30, 0x00	; 0
 5e8:	51 f0       	breq	.+20     	; 0x5fe <voidScheduler+0x52>
				{
					System_Tasks[Local_u8TaskCounter].Taskfunc();
 5ea:	09 95       	icall
					/* Assign the periodicity in the first delay */
					System_Tasks[Local_u8TaskCounter].task_u16FirstDelay = System_Tasks[Local_u8TaskCounter].task_u16periodicity -1;
 5ec:	88 81       	ld	r24, Y
 5ee:	99 81       	ldd	r25, Y+1	; 0x01
 5f0:	01 97       	sbiw	r24, 0x01	; 1
 5f2:	9b 83       	std	Y+3, r25	; 0x03
 5f4:	8a 83       	std	Y+2, r24	; 0x02
 5f6:	03 c0       	rjmp	.+6      	; 0x5fe <voidScheduler+0x52>
				}
			}else{
				/* Decreament the first delay */
				System_Tasks[Local_u8TaskCounter].task_u16FirstDelay --;
 5f8:	01 97       	sbiw	r24, 0x01	; 1
 5fa:	9b 83       	std	Y+3, r25	; 0x03
 5fc:	8a 83       	std	Y+2, r24	; 0x02
 5fe:	09 5f       	subi	r16, 0xF9	; 249
 600:	1f 4f       	sbci	r17, 0xFF	; 255
 602:	27 96       	adiw	r28, 0x07	; 7
static void voidScheduler(void)
{
	u8 Local_u8TaskCounter;
	
	 /* Loop on all tasks to check thier periodicity */
	for(Local_u8TaskCounter=0;Local_u8TaskCounter<MAXIMUM_NUMBER_TASKS;Local_u8TaskCounter++)
 604:	ce 15       	cp	r28, r14
 606:	df 05       	cpc	r29, r15
 608:	21 f7       	brne	.-56     	; 0x5d2 <voidScheduler+0x26>
		}else{
			// Do Nothing
		}
	}
	
 60a:	df 91       	pop	r29
 60c:	cf 91       	pop	r28
 60e:	1f 91       	pop	r17
 610:	0f 91       	pop	r16
 612:	ff 90       	pop	r15
 614:	ef 90       	pop	r14
 616:	df 90       	pop	r13
 618:	cf 90       	pop	r12
 61a:	08 95       	ret

0000061c <Start_voidSchaduler>:
Task_Parameters_t System_Tasks[MAXIMUM_NUMBER_TASKS]={{0}};
	
void Start_voidSchaduler(void)
{
	/* Function to run when the interrupt comes*/
	TIMER0_void_Init();
 61c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <TIMER0_void_Init>
	TIMER0_void_SetCompareVal(COMPARE_MATCH_VALUE);
 620:	8a ef       	ldi	r24, 0xFA	; 250
 622:	0e 94 99 03 	call	0x732	; 0x732 <TIMER0_void_SetCompareVal>
	GIE_voidGlobalInterruptEnable();
 626:	0e 94 90 02 	call	0x520	; 0x520 <GIE_voidGlobalInterruptEnable>
	TIMER0_void_SetCTCCallBack(&voidScheduler);
 62a:	86 ed       	ldi	r24, 0xD6	; 214
 62c:	92 e0       	ldi	r25, 0x02	; 2
 62e:	0e 94 b0 03 	call	0x760	; 0x760 <TIMER0_void_SetCTCCallBack>
	TIMER0_void_EnableCTCInt();
 632:	0e 94 a3 03 	call	0x746	; 0x746 <TIMER0_void_EnableCTCInt>
}
 636:	08 95       	ret

00000638 <Create_u8task>:

u8 Create_u8task(u8 task_u8priority, u16 task_u16periodicity,u16 task_u16FirstDelay, void (*CopyTaskfunc)(void))
{
 638:	db 01       	movw	r26, r22
 63a:	ba 01       	movw	r22, r20
 63c:	a9 01       	movw	r20, r18
	u8 Local_u8ErrorState = STD_OK;
	
	/* Check if there is another task in the index or not */
		if( System_Tasks[task_u8priority].Taskfunc == 0 )
 63e:	28 2f       	mov	r18, r24
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	f9 01       	movw	r30, r18
 644:	ee 0f       	add	r30, r30
 646:	ff 1f       	adc	r31, r31
 648:	ee 0f       	add	r30, r30
 64a:	ff 1f       	adc	r31, r31
 64c:	ee 0f       	add	r30, r30
 64e:	ff 1f       	adc	r31, r31
 650:	e2 1b       	sub	r30, r18
 652:	f3 0b       	sbc	r31, r19
 654:	e0 5a       	subi	r30, 0xA0	; 160
 656:	ff 4f       	sbci	r31, 0xFF	; 255
 658:	84 81       	ldd	r24, Z+4	; 0x04
 65a:	95 81       	ldd	r25, Z+5	; 0x05
 65c:	00 97       	sbiw	r24, 0x00	; 0
 65e:	a9 f4       	brne	.+42     	; 0x68a <Create_u8task+0x52>
		{
			System_Tasks[task_u8priority].task_u16periodicity= task_u16periodicity;
 660:	c9 01       	movw	r24, r18
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	88 0f       	add	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	82 1b       	sub	r24, r18
 670:	93 0b       	sbc	r25, r19
 672:	fc 01       	movw	r30, r24
 674:	e0 5a       	subi	r30, 0xA0	; 160
 676:	ff 4f       	sbci	r31, 0xFF	; 255
 678:	b1 83       	std	Z+1, r27	; 0x01
 67a:	a0 83       	st	Z, r26
			System_Tasks[task_u8priority].task_u16FirstDelay= task_u16FirstDelay;
 67c:	73 83       	std	Z+3, r23	; 0x03
 67e:	62 83       	std	Z+2, r22	; 0x02
			System_Tasks[task_u8priority].Taskfunc= CopyTaskfunc;
 680:	55 83       	std	Z+5, r21	; 0x05
 682:	44 83       	std	Z+4, r20	; 0x04
			System_Tasks[task_u8priority].task_u8state = TASK_RESUMED;
 684:	16 82       	std	Z+6, r1	; 0x06
	TIMER0_void_EnableCTCInt();
}

u8 Create_u8task(u8 task_u8priority, u16 task_u16periodicity,u16 task_u16FirstDelay, void (*CopyTaskfunc)(void))
{
	u8 Local_u8ErrorState = STD_OK;
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	08 95       	ret
			System_Tasks[task_u8priority].task_u16periodicity= task_u16periodicity;
			System_Tasks[task_u8priority].task_u16FirstDelay= task_u16FirstDelay;
			System_Tasks[task_u8priority].Taskfunc= CopyTaskfunc;
			System_Tasks[task_u8priority].task_u8state = TASK_RESUMED;
		}else{
			Local_u8ErrorState = STD_NOK;
 68a:	80 e0       	ldi	r24, 0x00	; 0
		}
		
		return Local_u8ErrorState;
}
 68c:	08 95       	ret

0000068e <Resume_voidTask>:

void Resume_voidTask(u8 task_u8priority)
{
	System_Tasks[task_u8priority].task_u8state = TASK_RESUMED;
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	fc 01       	movw	r30, r24
 692:	ee 0f       	add	r30, r30
 694:	ff 1f       	adc	r31, r31
 696:	ee 0f       	add	r30, r30
 698:	ff 1f       	adc	r31, r31
 69a:	ee 0f       	add	r30, r30
 69c:	ff 1f       	adc	r31, r31
 69e:	e8 1b       	sub	r30, r24
 6a0:	f9 0b       	sbc	r31, r25
 6a2:	e0 5a       	subi	r30, 0xA0	; 160
 6a4:	ff 4f       	sbci	r31, 0xFF	; 255
 6a6:	16 82       	std	Z+6, r1	; 0x06
}
 6a8:	08 95       	ret

000006aa <Suspend_voidTask>:

void Suspend_voidTask(u8 task_u8priority)
{
	System_Tasks[task_u8priority].task_u8state = TASK_SUSPEND;
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	fc 01       	movw	r30, r24
 6ae:	ee 0f       	add	r30, r30
 6b0:	ff 1f       	adc	r31, r31
 6b2:	ee 0f       	add	r30, r30
 6b4:	ff 1f       	adc	r31, r31
 6b6:	ee 0f       	add	r30, r30
 6b8:	ff 1f       	adc	r31, r31
 6ba:	e8 1b       	sub	r30, r24
 6bc:	f9 0b       	sbc	r31, r25
 6be:	e0 5a       	subi	r30, 0xA0	; 160
 6c0:	ff 4f       	sbci	r31, 0xFF	; 255
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	86 83       	std	Z+6, r24	; 0x06
}
 6c6:	08 95       	ret

000006c8 <Delete_voidTask>:

void Delete_voidTask(u8 task_u8priority)
{
	System_Tasks[task_u8priority].Taskfunc = 0;
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	fc 01       	movw	r30, r24
 6cc:	ee 0f       	add	r30, r30
 6ce:	ff 1f       	adc	r31, r31
 6d0:	ee 0f       	add	r30, r30
 6d2:	ff 1f       	adc	r31, r31
 6d4:	ee 0f       	add	r30, r30
 6d6:	ff 1f       	adc	r31, r31
 6d8:	e8 1b       	sub	r30, r24
 6da:	f9 0b       	sbc	r31, r25
 6dc:	e0 5a       	subi	r30, 0xA0	; 160
 6de:	ff 4f       	sbci	r31, 0xFF	; 255
 6e0:	15 82       	std	Z+5, r1	; 0x05
 6e2:	14 82       	std	Z+4, r1	; 0x04
}
 6e4:	08 95       	ret

000006e6 <TIMER0_void_Init>:
	#if(TIMER0_MODE == TIMER0_NORMAL)
		CLEAR_BIT(TCCR0 , 6);
		CLEAR_BIT(TCCR0 , 3);
	
	#elif(TIMER0_MODE == TIMER0_CTC)
		CLEAR_BIT(TCCR0 , 6);
 6e6:	83 b7       	in	r24, 0x33	; 51
 6e8:	8f 7b       	andi	r24, 0xBF	; 191
 6ea:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0 , 3);
 6ec:	83 b7       	in	r24, 0x33	; 51
 6ee:	88 60       	ori	r24, 0x08	; 8
 6f0:	83 bf       	out	0x33, r24	; 51
	#elif(TIMER0_PRESCALER == TIMER0_DIV_BY_8)
		CLEAR_BIT(TCCR0 , 0);
		SET_BIT(TCCR0 , 1);
		CLEAR_BIT(TCCR0 , 2);
	#elif(TIMER0_PRESCALER == TIMER0_DIV_BY_64 )
		SET_BIT(TCCR0 , 0);
 6f2:	83 b7       	in	r24, 0x33	; 51
 6f4:	81 60       	ori	r24, 0x01	; 1
 6f6:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0 , 1);
 6f8:	83 b7       	in	r24, 0x33	; 51
 6fa:	82 60       	ori	r24, 0x02	; 2
 6fc:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0 , 2);
 6fe:	83 b7       	in	r24, 0x33	; 51
 700:	8b 7f       	andi	r24, 0xFB	; 251
 702:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0 , 2);
		
	#endif
	
	#if(TIMER0_COM_EVENT == TIMER0_NO_ACTION)
		CLEAR_BIT(TCCR0 , 4);
 704:	83 b7       	in	r24, 0x33	; 51
 706:	8f 7e       	andi	r24, 0xEF	; 239
 708:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0 , 5);
 70a:	83 b7       	in	r24, 0x33	; 51
 70c:	8f 7d       	andi	r24, 0xDF	; 223
 70e:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0 , 5);

		
	#endif
	/*Disable Interrupts*/
	CLEAR_BIT(TIMSK , 0);	
 710:	89 b7       	in	r24, 0x39	; 57
 712:	8e 7f       	andi	r24, 0xFE	; 254
 714:	89 bf       	out	0x39, r24	; 57
	CLEAR_BIT(TIMSK , 1);
 716:	89 b7       	in	r24, 0x39	; 57
 718:	8d 7f       	andi	r24, 0xFD	; 253
 71a:	89 bf       	out	0x39, r24	; 57
	/*CLEAR FLAGS*/
	SET_BIT(TIFR , 0);	
 71c:	88 b7       	in	r24, 0x38	; 56
 71e:	81 60       	ori	r24, 0x01	; 1
 720:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR , 1);
 722:	88 b7       	in	r24, 0x38	; 56
 724:	82 60       	ori	r24, 0x02	; 2
 726:	88 bf       	out	0x38, r24	; 56
	/*Clear register*/
	TCNT0 = 0 ;
 728:	12 be       	out	0x32, r1	; 50
	OCR0 = 0 ;
 72a:	1c be       	out	0x3c, r1	; 60
	
	
}
 72c:	08 95       	ret

0000072e <TIMER0_void_SetTimerReg>:

void TIMER0_void_SetTimerReg(u8 Copy_uint8Val)
{
	TCNT0 = Copy_uint8Val ;
 72e:	82 bf       	out	0x32, r24	; 50
}
 730:	08 95       	ret

00000732 <TIMER0_void_SetCompareVal>:

void TIMER0_void_SetCompareVal(u8 Copy_uint8Val)
{
	OCR0 = Copy_uint8Val ;
 732:	8c bf       	out	0x3c, r24	; 60
}
 734:	08 95       	ret

00000736 <TIMER0_void_EnableOVInt>:

void TIMER0_void_EnableOVInt(void)
{
	SET_BIT(TIMSK , 0);
 736:	89 b7       	in	r24, 0x39	; 57
 738:	81 60       	ori	r24, 0x01	; 1
 73a:	89 bf       	out	0x39, r24	; 57
}
 73c:	08 95       	ret

0000073e <TIMER0_void_DisableOVInt>:

void TIMER0_void_DisableOVInt(void)
{
	CLEAR_BIT(TIMSK , 0);
 73e:	89 b7       	in	r24, 0x39	; 57
 740:	8e 7f       	andi	r24, 0xFE	; 254
 742:	89 bf       	out	0x39, r24	; 57
}
 744:	08 95       	ret

00000746 <TIMER0_void_EnableCTCInt>:

void TIMER0_void_EnableCTCInt(void)
{
	SET_BIT(TIMSK , 1);
 746:	89 b7       	in	r24, 0x39	; 57
 748:	82 60       	ori	r24, 0x02	; 2
 74a:	89 bf       	out	0x39, r24	; 57
}
 74c:	08 95       	ret

0000074e <TIMER0_void_DisableCTCInt>:

void TIMER0_void_DisableCTCInt(void)
{
	CLEAR_BIT(TIMSK , 1);
 74e:	89 b7       	in	r24, 0x39	; 57
 750:	8d 7f       	andi	r24, 0xFD	; 253
 752:	89 bf       	out	0x39, r24	; 57
}
 754:	08 95       	ret

00000756 <TIMER0_void_SetOVCallBack>:

void TIMER0_void_SetOVCallBack(void (*Copy_ptr) (void) ) 
{
	TIMER0_OV_CallBack = Copy_ptr ;
 756:	90 93 78 00 	sts	0x0078, r25
 75a:	80 93 77 00 	sts	0x0077, r24
}
 75e:	08 95       	ret

00000760 <TIMER0_void_SetCTCCallBack>:

void TIMER0_void_SetCTCCallBack(void (*Copy_ptr) (void) ) 
{
	TIMER0_CTC_CallBack = Copy_ptr ;
 760:	90 93 76 00 	sts	0x0076, r25
 764:	80 93 75 00 	sts	0x0075, r24
	
}
 768:	08 95       	ret

0000076a <__vector_11>:

void __vector_11(void) __attribute__((signal , used));
void __vector_11(void)
{
 76a:	1f 92       	push	r1
 76c:	0f 92       	push	r0
 76e:	0f b6       	in	r0, 0x3f	; 63
 770:	0f 92       	push	r0
 772:	11 24       	eor	r1, r1
 774:	2f 93       	push	r18
 776:	3f 93       	push	r19
 778:	4f 93       	push	r20
 77a:	5f 93       	push	r21
 77c:	6f 93       	push	r22
 77e:	7f 93       	push	r23
 780:	8f 93       	push	r24
 782:	9f 93       	push	r25
 784:	af 93       	push	r26
 786:	bf 93       	push	r27
 788:	ef 93       	push	r30
 78a:	ff 93       	push	r31
	
	TIMER0_OV_CallBack();
 78c:	e0 91 77 00 	lds	r30, 0x0077
 790:	f0 91 78 00 	lds	r31, 0x0078
 794:	09 95       	icall
}
 796:	ff 91       	pop	r31
 798:	ef 91       	pop	r30
 79a:	bf 91       	pop	r27
 79c:	af 91       	pop	r26
 79e:	9f 91       	pop	r25
 7a0:	8f 91       	pop	r24
 7a2:	7f 91       	pop	r23
 7a4:	6f 91       	pop	r22
 7a6:	5f 91       	pop	r21
 7a8:	4f 91       	pop	r20
 7aa:	3f 91       	pop	r19
 7ac:	2f 91       	pop	r18
 7ae:	0f 90       	pop	r0
 7b0:	0f be       	out	0x3f, r0	; 63
 7b2:	0f 90       	pop	r0
 7b4:	1f 90       	pop	r1
 7b6:	18 95       	reti

000007b8 <__vector_10>:

void __vector_10(void) __attribute__((signal , used));
void __vector_10(void)
{
 7b8:	1f 92       	push	r1
 7ba:	0f 92       	push	r0
 7bc:	0f b6       	in	r0, 0x3f	; 63
 7be:	0f 92       	push	r0
 7c0:	11 24       	eor	r1, r1
 7c2:	2f 93       	push	r18
 7c4:	3f 93       	push	r19
 7c6:	4f 93       	push	r20
 7c8:	5f 93       	push	r21
 7ca:	6f 93       	push	r22
 7cc:	7f 93       	push	r23
 7ce:	8f 93       	push	r24
 7d0:	9f 93       	push	r25
 7d2:	af 93       	push	r26
 7d4:	bf 93       	push	r27
 7d6:	ef 93       	push	r30
 7d8:	ff 93       	push	r31
	
	TIMER0_CTC_CallBack();
 7da:	e0 91 75 00 	lds	r30, 0x0075
 7de:	f0 91 76 00 	lds	r31, 0x0076
 7e2:	09 95       	icall
}
 7e4:	ff 91       	pop	r31
 7e6:	ef 91       	pop	r30
 7e8:	bf 91       	pop	r27
 7ea:	af 91       	pop	r26
 7ec:	9f 91       	pop	r25
 7ee:	8f 91       	pop	r24
 7f0:	7f 91       	pop	r23
 7f2:	6f 91       	pop	r22
 7f4:	5f 91       	pop	r21
 7f6:	4f 91       	pop	r20
 7f8:	3f 91       	pop	r19
 7fa:	2f 91       	pop	r18
 7fc:	0f 90       	pop	r0
 7fe:	0f be       	out	0x3f, r0	; 63
 800:	0f 90       	pop	r0
 802:	1f 90       	pop	r1
 804:	18 95       	reti

00000806 <_exit>:
 806:	f8 94       	cli

00000808 <__stop_program>:
 808:	ff cf       	rjmp	.-2      	; 0x808 <__stop_program>
